{"version":3,"sources":["../../src/Utils/base.js"],"names":["getQueryString","name","reg","RegExp","urls","window","location","href","split","r","match","decodeURI","FormatDate","times","format","Date","date","getMonth","getDate","getHours","getMinutes","getSeconds","Math","floor","getMilliseconds","test","replace","$1","getFullYear","substr","length","k","FormatPrice","number","isMoney","decimals","thousands_sep","dec_point","parseInt","toFixed","n","isFinite","prec","abs","sep","dec","s","toFixedFix","pow","re","Array","join","getTimeDistance","type","now","oneDay","fixedZero","val","setHours","setMinutes","setSeconds","getTime","day","getDay","beginTime","year","month","nextDate","add","nextYear","nextMonth","valueOf"],"mappings":"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","file":"base.js","sourcesContent":["import moment from 'moment';\r\n/**\r\n * name: 公共方法\r\n * author: 雏田\r\n * version: 1.1\r\n * time: 2018-07-20\r\n */\r\nexport default { \r\n  /**\r\n   * [获取url参数https://a.com?a=1&b=2获取a,b的值]\r\n   * @param  {[type]} name [参数名(a,b)]\r\n   * @return {[type]}      [得到的值(1,2)]\r\n   */\r\n  getQueryString: (name) => {\r\n      // 构造一个含有目标参数的正则表达式对象\r\n      let reg = new RegExp('(^|&)' + name + '=([^&]*)(&|$)');\r\n      // 匹配目标参数\r\n      // let urls=window.location.search.substr(1);\r\n      let urls=window.location.href.split('?')[1];\r\n      if (urls) {\r\n        let r = urls.match(reg);\r\n        if (r != null) {\r\n            return decodeURI(r[2]);\r\n        }\r\n      }\r\n      return null;\r\n  },\r\n  /**\r\n   * [时间格式化]\r\n   * @param  {[type]} times  时间戳,1535701322000这种格式\r\n   * @param  {[type]} format 时间格式，默认为[yyyy-MM-dd hh:mm:ss],注意大小写\r\n   * @return {[type]} date      [description]\r\n   */\r\n  FormatDate: (times, format = 'yyyy-MM-dd hh:mm:ss') => {\r\n    times = new Date(times)\r\n    let date = {\r\n      'M+': times.getMonth() + 1,\r\n      'd+': times.getDate(),\r\n      'h+': times.getHours(),\r\n      'm+': times.getMinutes(),\r\n      's+': times.getSeconds(),\r\n      'q+': Math.floor((times.getMonth() + 3) / 3),\r\n      'S+': times.getMilliseconds(),\r\n    };\r\n    if (/(y+)/i.test(format)) {\r\n      format = format.replace(RegExp.$1, (times.getFullYear() + '')\r\n        .substr(4 - RegExp.$1.length));\r\n    }\r\n    for (let k in date) {\r\n      if (new RegExp('(' + k + ')').test(format)) {\r\n        format = format.replace(RegExp.$1, RegExp.$1.length === 1\r\n          ? date[k] : ('00' + date[k]).substr(('' + date[k]).length));\r\n      }\r\n    }    \r\n    return format;\r\n  },\r\n  /**\r\n  * [金额格式化]\r\n  * @param  {[type]} number        [要格式化的数分]\r\n  * @param  {[type]} isMoney       [传进来的金额单位为分,默认为true]\r\n  * @param  {[type]} thousands_sep [千分位符号,默认为,]\r\n  * @param  {[type]} decimals      [保留几位小数，默认为2]\r\n  * @param  {[type]} dec_point     [小数点符号，默认为.]\r\n  * @return {[type]}               [格式化之后的金额元]\r\n  */\r\n  FormatPrice: (number, isMoney = true, decimals = 2, thousands_sep = ',', dec_point = '.') => {\r\n    // 先转为元\r\n    if(isMoney) number = (parseInt(number, 10) / 100).toFixed(decimals);\r\n    else {\r\n      number = parseInt(number,10);\r\n    }   \r\n    number = (number + '').replace(/[^0-9+-Ee.]/g, '');        \r\n    let n = !isFinite(+number) ? 0 : +number;    \r\n    let prec = !isFinite(+decimals) ? 0 : Math.abs(decimals);\r\n    let sep = (typeof thousands_sep === 'undefined') ? ',' : thousands_sep;\r\n    let dec = (typeof dec_point === 'undefined') ? '.' : dec_point;\r\n    let s = '';\r\n    let toFixedFix = function (n, prec) {      \r\n      let k = Math.pow(10, prec); \r\n      // 防止精度缺失，要加0.5     \r\n      return '' + Math.floor(n * k + 0.5) / k;\r\n    };\r\n    s = (prec ? toFixedFix(n, prec) : '' + Math.floor(n)).split('.');\r\n    let re = /(-?\\d+)(\\d{3})/;\r\n    while (re.test(s[0])) {\r\n      s[0] = s[0].replace(re, \"$1\" + sep + \"$2\");\r\n    }\r\n    if ((s[1] || '').length < prec) {\r\n      s[1] = s[1] || '';\r\n      s[1] += new Array(prec - s[1].length + 1).join('0');\r\n    }\r\n    return s.join(dec);\r\n  },\r\n  /**\r\n   * [获取时间区间]\r\n   * @param  {[type]} type [获取时间区间格式，today今日，week本周,month本月，year今年]\r\n   * @return {[type]}      [description]\r\n   */\r\n  getTimeDistance: (type) => {\r\n    const now = new Date();\r\n    const oneDay = 1000 * 60 * 60 * 24;\r\n    const fixedZero = (val) => {\r\n      return val * 1 < 10 ? `0${val}` : val;\r\n    }\r\n    if (type === 'today') {\r\n      now.setHours(0);\r\n      now.setMinutes(0);\r\n      now.setSeconds(0);\r\n      return [moment(now), moment(now.getTime() + (oneDay - 1000))];\r\n    }\r\n    if (type === 'week') {\r\n      let day = now.getDay();\r\n      now.setHours(0);\r\n      now.setMinutes(0);\r\n      now.setSeconds(0);\r\n      if (day === 0) {\r\n        day = 6;\r\n      } else {\r\n        day -= 1;\r\n      }\r\n      const beginTime = now.getTime() - day * oneDay;\r\n      return [moment(beginTime), moment(beginTime + (7 * oneDay - 1000))];\r\n    }\r\n    if (type === 'month') {\r\n      const year = now.getFullYear();\r\n      const month = now.getMonth();\r\n      const nextDate = moment(now).add(1, 'months');\r\n      const nextYear = nextDate.year();\r\n      const nextMonth = nextDate.month();\r\n      return [\r\n        moment(`${year}-${fixedZero(month + 1)}-01 00:00:00`),\r\n        moment(moment(`${nextYear}-${fixedZero(nextMonth + 1)}-01 00:00:00`).valueOf() - 1000),\r\n      ];\r\n    }\r\n    if (type === 'year') {\r\n      const year = now.getFullYear();\r\n      return [moment(`${year}-01-01 00:00:00`), moment(`${year}-12-31 23:59:59`)];\r\n    }\r\n  },\r\n}\r\n\r\n"]}