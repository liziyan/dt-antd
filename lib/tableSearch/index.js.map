{"version":3,"sources":["../../src/tableSearch/index.js"],"names":["FormItem","Form","Item","Option","Select","RangePicker","DatePicker","TableSearch","state","expandForm","searchCallBack","e","preventDefault","form","props","validateFields","err","fieldsValue","values","updatedAt","valueOf","resetCallBack","resetFields","nextProps","proData","renderSimpleForm","setState","open","getFieldDecorator","length","Math","ceil","item","i","menu","slice","push","colLayout","md","span","sm","formItemLayout","map","value","index","lg","xl","key","_index","label","placeholder","id","option","defaultValue","isRequire","type","initialValue","rules","required","message","width","marginLeft","btns","callBack","text","hidden","toggleForm","bind","overflow","float","marginBottom","json","concat","renderChildrenForm","renderForm","React","Component","WrappedRegistrationForm","create"],"mappings":"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","file":"index.js","sourcesContent":["/**\r\n * @title: 表格上方的搜索组件\r\n * @author: 雏田\r\n * @version: 1.0.1\r\n * @time: 2018-08-01\r\n * @updateTime: 2018-08-20 新增timePicker和rangePicker by 雏田\r\n * @updateTime: 2018-08-27 新增input标签的isRequire必填字段 by 雏田\r\n * @updateTime: 2018-09-06 新增btns更多的按钮 by 雏田\r\n * 传入的数据格式:\r\n * const searchMenu = {      \r\n      // 常在的选项\r\n      open: [{\r\n        id: 'rule',\r\n        label: '规则编号',\r\n        type: 'input', // input输入框\r\n        placeholder: '请输入规则编号',\r\n        defaultValue: '默认值',\r\n        isRequire: true, // 必填        \r\n      }, {\r\n        id:'status',\r\n        label: '选择时间',\r\n        type: 'timePicker', \r\n        placeholder: '请输入时间',\r\n      },{\r\n        id: 'rule1',\r\n        label: '选择日期范围',\r\n        type: 'rangePicker', \r\n        placeholder: '请输入选择日期范围'\r\n      }, {\r\n        id:'status1',\r\n        label: '使用状态',\r\n        type: 'select', // 下拉框\r\n        defaultValue: '', // 默认值\r\n        option: [{\r\n          label: '关闭',\r\n          value: 4,\r\n        }], \r\n      },],\r\n      // 被隐藏起来的选项,如果默认全部显示，则不调用\r\n      hidden: [{\r\n        id: 'date',\r\n        label: '更新日期',\r\n        type: 'datePicker', // 日期选择器\r\n        placeholder: '请输入更新日期',\r\n      }],\r\n      // 新增按钮，默认白色背景的按钮，需要更改请重写组件  \r\n      btns:[{\r\n        text: '导出',\r\n        callBack: this.handleOut,\r\n      }],\r\n      searchCallBack: (values) => console.log(values), // 查询的回调函数\r\n      resetCallBack: this.handleFormReset, // 重置的回调函数\r\n      // 除查询和重置外还要加的按钮组，默认加载查询前面，如不满足，重改组件。暂时用不到，所以没做，如果需要，请再对组件进行拓展\r\n      btns: [{\r\n        type: 'button',\r\n        label: '导出',\r\n        callBack: this.handleSearch, // 回调函数\r\n      }]\r\n    }\r\n */\r\nimport React from 'react';\r\nimport {\r\n  Row,\r\n  Col,\r\n  Form,\r\n  Input,\r\n  Select,\r\n  Icon,\r\n  Button, \r\n  DatePicker, \r\n  TimePicker\r\n} from 'antd';\r\nimport { is, fromJS } from 'immutable';\r\n\r\nconst FormItem = Form.Item;\r\nconst { Option } = Select;\r\nconst {RangePicker} = DatePicker;\r\n\r\nclass TableSearch extends React.Component {\r\n  state={\r\n    expandForm: false, // 展开状态\r\n  }  \r\n  /**\r\n   * [componentWillReceiveProps 子组件更新子组件]\r\n   * @param  {[type]} nextProps [description]\r\n   * @return {[type]}           [description]\r\n   */\r\n  componentWillReceiveProps(nextProps){\r\n    if(!is(fromJS(this.props.proData), fromJS(nextProps.proData))){\r\n      this.renderSimpleForm(nextProps);\r\n    }\r\n  }  \r\n  /**\r\n   * [componentWillMount 加载render方法之前]\r\n   * @return {[type]} [description]\r\n   */\r\n  componentWillMount(){\r\n   // this.renderSimpleForm(this.props);\r\n  }\r\n  toggleForm(){\r\n    const { expandForm } = this.state;\r\n    this.setState({\r\n      expandForm: !expandForm,\r\n    });\r\n  }\r\n  /**\r\n   * [查询的回调函数]\r\n   * @param  {[type]} e [description]\r\n   * @return {[type]}   [description]\r\n   */\r\n  searchCallBack = (e) => {\r\n    e.preventDefault();\r\n    const {form} = this.props;\r\n    form.validateFields((err, fieldsValue) => {      \r\n      if (err) return;\r\n      const values = {\r\n        ...fieldsValue,\r\n        updatedAt: fieldsValue.updatedAt && fieldsValue.updatedAt.valueOf(),\r\n      };\r\n      this.props.searchCallBack(values);      \r\n    });\r\n  }\r\n  /**\r\n   * [重置按钮的回调函数]\r\n   * @return {[type]} [description]\r\n   */\r\n  resetCallBack = (e) => {\r\n    const {form} = this.props;\r\n    form.resetFields();    \r\n    this.props.resetCallBack();\r\n  }; \r\n  /**\r\n   * [renderChildrenForm description]\r\n   * @param  {[type]} open [description]\r\n   * @return {[type]}      [description]\r\n   */\r\n  renderChildrenForm(open) {\r\n    const { getFieldDecorator } = this.props.form;\r\n    // 获取一共需要的行数   \r\n    let length = Math.ceil(open.length / 3);\r\n    // 用来装根据一行3个排列之后的数组\r\n    let item = [];\r\n    // 将数据分为三个一行\r\n    for(let i=0; i<length; i++) {\r\n      let menu = open.slice(i*3, i*3+3);\r\n      item.push(menu);\r\n    }   \r\n    const colLayout = {\r\n      md:{span :8},\r\n      sm:{span: 24}\r\n    };\r\n    const formItemLayout = {};\r\n    return (<Form onSubmit={this.searchCallBack} layout=\"inline\">\r\n      {        \r\n        item.map((value, index) => {          \r\n          return (<Row gutter={{ md: 8, lg: 24, xl: 48 }} key={index}>\r\n          {            \r\n            value.map((key, _index) => {\r\n              const {label, placeholder, id, option, defaultValue, isRequire} = key;\r\n              switch(key.type) {\r\n                case 'input':      \r\n                  return (<Col {...colLayout} key={_index}>\r\n                      <FormItem label={label} {...formItemLayout}>\r\n                        {getFieldDecorator(id, {\r\n                          initialValue: defaultValue,\r\n                          rules: [{ required: isRequire, message: '必填' }],\r\n                        })(<Input key={id} placeholder={placeholder}/>)}\r\n                      </FormItem>\r\n                  </Col>);\r\n                case 'select':\r\n                  return (<Col {...colLayout} key={_index}>\r\n                      <FormItem label={label} {...formItemLayout}>\r\n                        {getFieldDecorator(id, {\r\n                          initialValue: defaultValue || option[0].value,\r\n                        })(\r\n                          <Select placeholder={placeholder} key={id}>\r\n                            {\r\n                              option && option.map((item) => {\r\n                                return (<Option key={item.value} value={item.value}>{item.label}</Option>)\r\n                              })\r\n                            }           \r\n                          </Select>\r\n                        )}\r\n                      </FormItem> \r\n                    </Col>);\r\n                case 'datePicker':\r\n                  return (<Col {...colLayout} key={_index}>\r\n                    <FormItem label={label} {...formItemLayout}>\r\n                      {getFieldDecorator(id)(\r\n                        <DatePicker style={{ width: '100%' }} key={id} placeholder={placeholder} />\r\n                      )}\r\n                    </FormItem>\r\n                  </Col>);\r\n                case 'timePicker':\r\n                  return (<Col {...colLayout} key={_index}>\r\n                    <FormItem label={label} {...formItemLayout}>\r\n                      {getFieldDecorator(id)(\r\n                        <TimePicker style={{ width: '100%' }} key={id} placeholder={placeholder} />\r\n                      )}\r\n                    </FormItem>\r\n                  </Col>);\r\n                  case 'rangePicker':\r\n                  return (<Col {...colLayout} key={_index}>\r\n                    <FormItem label={label} {...formItemLayout}>\r\n                      {getFieldDecorator(id)(\r\n                        <RangePicker key={id} style={{ width: '100%' }} placeholder={placeholder} />\r\n                      )}\r\n                    </FormItem>\r\n                  </Col>);\r\n                default:\r\n                  return '';\r\n              }                       \r\n            })          \r\n          }\r\n          \r\n          {\r\n            (item[item.length-1].length !== 3 && index === item.length-1) &&\r\n            (<Col md={3} sm={9}>\r\n            <span className='submitButtons'>\r\n              <Button type=\"primary\" htmlType=\"submit\">\r\n                搜索\r\n              </Button>\r\n              <Button style={{ marginLeft: 8 }} onClick={this.resetCallBack}>\r\n                重置\r\n              </Button>\r\n              {\r\n                this.props.btns && this.props.btns.map((item, index)=>{\r\n                  return (<Button key={index} style={{ marginLeft: 8 }} onClick={()=>{\r\n                    item.callBack();\r\n                  }}>\r\n                    {item.text}\r\n                  </Button>)\r\n                })\r\n              }\r\n              {\r\n                this.props.hidden &&\r\n                (<a style={{ marginLeft: 8 }} onClick={this.toggleForm.bind(this)}>\r\n                  {\r\n                    this.state.expandForm ? '收起' : '展开'\r\n                  }\r\n                  {\r\n                    this.state.expandForm ? <Icon type=\"up\" /> : <Icon type=\"down\" />\r\n                  }\r\n                </a>)\r\n              }\r\n            </span>\r\n          </Col>)\r\n          }          \r\n          </Row>)      \r\n        })\r\n      }\r\n      {\r\n        item[item.length-1].length === 3 &&\r\n        (<div style={{ overflow: 'hidden' }}>\r\n          <span style={{ float: 'right', marginBottom: 24 }}>\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n              搜索\r\n            </Button>\r\n            <Button style={{ marginLeft: 8 }} onClick={this.resetCallBack}>\r\n              重置\r\n            </Button>\r\n            {\r\n              this.props.btns && this.props.btns.map((item, index)=>{\r\n                return (<Button key={index} style={{ marginLeft: 8 }} onClick={()=>{\r\n                  item.callBack();\r\n                }}>\r\n                  {item.text}\r\n                </Button>)\r\n              })\r\n            }\r\n            {\r\n              this.props.hidden &&\r\n              (<a style={{ marginLeft: 8 }} onClick={this.toggleForm.bind(this)}>\r\n                {\r\n                  this.state.expandForm ? '收起' : '展开'\r\n                }\r\n                {\r\n                  this.state.expandForm ? <Icon type=\"up\" /> : <Icon type=\"down\" />\r\n                }\r\n              </a>)\r\n            }            \r\n          </span>\r\n        </div>)\r\n      }\r\n    </Form>)\r\n  }\r\n  /**\r\n   * [renderForm 获取当前的json]\r\n   * @return {[type]} [description]\r\n   */\r\n  renderForm() {\r\n    const { expandForm } = this.state;\r\n    const {open, hidden} = this.props;    \r\n    let json = expandForm ? open.concat(hidden) : open;\r\n    return this.renderChildrenForm(json);    \r\n  }\r\n  render() {\r\n    return (<div>\r\n      {this.renderForm()}\r\n    </div>)    \r\n  }\r\n}\r\nconst WrappedRegistrationForm = Form.create()(TableSearch);\r\nexport default WrappedRegistrationForm;"]}